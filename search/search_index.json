{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the MC-Build Documentation!","text":"<p>Check out the Getting Started guide to learn how to install and use MC-Build.</p>"},{"location":"#what-is-mc-build","title":"What is MC-Build?","text":"<p>MC-Build is a Data Pack pre-compiler language. Designed as a superset of Minecraft's commands, it's aimed to make it easier to write and maintain complex Data Packs without needing to learn or use an entirely different language.</p>"},{"location":"#community","title":"Community","text":"<p>Join our Discord Server! We're always happy to help out and answer any questions you might have.</p>"},{"location":"getting-started/","title":"Getting Started with MC-Build","text":"<p>Getting started with MC-Build is easy! This guide will walk you through the process of installing MC-Build and creating your first project.</p>"},{"location":"getting-started/#installing-mc-build","title":"Installing MC-Build","text":"<p>In order to install MC-Build, You'll first need Node.js.</p> <p>If you don't already have Node.js, visit their site (nodejs.org) and download and run the installer.</p> <p>Once you've installed Node.js, open a command prompt and run the following command:</p> <pre><code>npm i -g mc-build@alpha\n</code></pre> <p>That's it! MC-Build is now installed.</p> <p>You can run <code>mcb</code> in the command prompt to verify that MC-Build is installed correctly:</p> <pre><code>$ mcb\nMCB - A Minecraft Data Pack build tool.\n\nUsage: ...\n</code></pre>"},{"location":"getting-started/#creating-a-new-project","title":"Creating a New Project.","text":"<p>MC-Build comes with a command to help you quickly setup a new project. Simply navigate to your chosen <code>world/datapacks</code> folder, then run the following command:</p> <pre><code>mcb create my_epic_datapack\n</code></pre> <p>This will create a new folder called <code>my_epic_datapack</code> in your <code>world/datapacks</code> folder, and set up a basic project structure for you.</p>"},{"location":"getting-started/#the-project-structure","title":"The Project Structure","text":"<ul> <li><code>my_epic_datapack</code> - This is the root folder of your project.<ul> <li><code>pack.mcmeta</code> - This file is identical to a vanilla <code>pack.mcmeta</code> file.</li> <li><code>src/</code> - This folder is where you'll write your MC-Build code.</li> <li><code>data/</code> - MC-Build will compile your code into this folder, which is the same structure as a vanilla data pack.</li> <li><code>mcb.config.js</code> - The configuration file for your project.</li> </ul> </li> </ul>"},{"location":"getting-started/#building-your-project","title":"Building Your Project","text":"<p>Navigate to your project folder and run the following command:</p> <pre><code>mcb watch\n</code></pre> <p>This will start the MC-Build compiler in watch mode, which will automatically compile your code whenever you make changes.</p> <p>You can also run <code>mcb build</code> to compile your code once, without watch mode.</p> <p>That's it! Your project is now ready for development.</p>"},{"location":"getting-started/#whats-next","title":"What's Next?","text":"<p>Check out the Language Features documentation for more information on how to write MC-Build code. </p>"},{"location":"migrating-mcb-2-to-3/","title":"Migrating from MCB 2","text":""},{"location":"migrating-mcb-2-to-3/#updating-mc-build-3","title":"Updating MC-Build 3","text":"<p>If you already have MC-Build 2 installed, you can run this command to overwrite it, and install MC-Build 3 globally. <pre><code>npm i -g mc-build@alpha\n</code></pre></p>"},{"location":"migrating-mcb-2-to-3/#cli-differences","title":"CLI Differences","text":"<p>Running <code>mcb</code> will no longer start watch mode by default. You'll need to run <code>mcb watch</code> instead.</p> <p>You can run <code>mcb</code> to see a list of available commands.</p>"},{"location":"migrating-mcb-2-to-3/#upgrading-your-configjs-and-configjson-files","title":"Upgrading your <code>config.js</code> and <code>config.json</code> files","text":"<p>The <code>config.js</code> and <code>config.json</code> files have been updated to be more flexible and easier to use. You will need to update your <code>config.js</code> or <code>config.json</code> file to match the new format.</p> <p>First, you will need to rename your <code>config.js</code> or <code>config.json</code> file to <code>mcb.config.js</code> or <code>mcb.config.json</code> respectively.</p> <p>Then, you will need to update the fields in your <code>config.js</code> or <code>config.json</code> file to match the new format. The following tables show the old fields and their new replacements. Expand the table for your respective file type to see the changes.</p> Upgrading from <code>config.js</code> to <code>mcb.config.js</code> Old Field New Field Default Description <code>mc.dev</code> <code>N/A</code> The functionality of <code>mc.dev</code> can be replicated using a custom key, so it has been removed. <code>mc.header</code> <code>header</code> <code>\"# Generated with MC-Build\\n\"</code> The header to be added to the top of all generated files. <code>mc.internalScoreboard</code> <code>internalScoreboardName</code> <code>\"mcb.internal\"</code> The name of the internal scoreboard used by MC-Build. <code>mc.rootNamespace</code> <code>N/A</code> The <code>mc.rootNamespace</code> option has been removed. <code>global.preBuild</code> <code>setup</code> <code>null</code> The <code>global.preBuild</code> and <code>global.postBuild</code> options have been replaced with the <code>setup</code> option. <code>global.postBuild</code> <code>setup</code> <code>null</code> The <code>global.preBuild</code> and <code>global.postBuild</code> options have been replaced with the <code>setup</code> option. <code>mc-math.tempScoreboard</code> <code>eqVarScoreboardName</code> <code>\"mcb.eq.var\"</code> The scoreboard to use when for temperary variables when using <code>eq</code> expressions. <code>mc-math.constScoreboard</code> <code>eqConstScoreboardName</code> <code>\"mcb.eq.const\"</code> The scoreboard to use when for constant values when using <code>eq</code> expressions. <code>mc-extra.integrated</code> <code>N/A</code> The <code>mc-extra.integrated</code> option has been removed, as the functionality of mc-extra has been integrated into the default language. Old Default config.js<pre><code>module.exports = {\n    global: {\n        preBuild: null,\n        postBuild: null,\n    },\n    mc: {\n        dev: true,\n        header: \"# Generated with MC-Build\\n\",\n        internalScoreboard: \"mcb.internal\",\n        rootNamespace: \"mcb\",\n    },\n    \"mc-math\": {\n        tempScoreboard: \"mcb.eq.var\",\n        constScoreboard: \"mcb.eq.const\"\n    }\n}\n</code></pre> New Default mcb.config.js<pre><code>module.exports = {\n    header: \"# Generated with MC-Build\\n\",\n    internalScoreboardName: \"mcb.internal\",\n    eqVarScoreboardName: \"mcb.eq.var\",\n    eqConstScoreboardName: \"mcb.eq.const\",\n    setup: null,\n    ioThreadCount: 1,\n}\n</code></pre> Upgrading from <code>config.json</code> to <code>mcb.config.json</code> Old Field New Field Default Description <code>mc.dev</code> <code>N/A</code> The functionality of <code>mc.dev</code> can be replicated using a custom key, so it has been removed. <code>mc.header</code> <code>header</code> <code>\"# Generated with MC-Build\\n\"</code> The header to be added to the top of all generated files. <code>mc.internalScoreboard</code> <code>internalScoreboardName</code> <code>\"mcb.internal\"</code> The name of the internal scoreboard used by MC-Build. <code>mc.rootNamespace</code> <code>N/A</code> The <code>mc.rootNamespace</code> option has been removed. <code>mc-math.tempScoreboard</code> <code>eqVarScoreboardName</code> <code>\"mcb.eq.var\"</code> The scoreboard to use when for temperary variables when using <code>eq</code> expressions. <code>mc-math.constScoreboard</code> <code>eqConstScoreboardName</code> <code>\"mcb.eq.const\"</code> The scoreboard to use when for constant values when using <code>eq</code> expressions. <code>mc-extra.integrated</code> <code>N/A</code> The <code>mc-extra.integrated</code> option has been removed, as the functionality of mc-extra has been integrated into the default language. Old Default config.json<pre><code>{\n    \"mc\": {\n        \"dev\": true,\n        \"header\": \"# Generated with MC-Build\\n\",\n        \"internalScoreboard\": \"mcb.internal\",\n        \"rootNamespace\": \"mcb\"\n    },\n    \"mc-math\": {\n        \"tempScoreboard\": \"mcb.eq.var\",\n        \"constScoreboard\": \"mcb.eq.const\"\n    }\n}\n</code></pre> New Default mcb.config.json<pre><code>{\n    \"header\": \"# Generated with MC-Build\\n\",\n    \"internalScoreboardName\": \"mcb.internal\",\n    \"eqVarScoreboardName\": \"mcb.eq.var\",\n    \"eqConstScoreboardName\": \"mcb.eq.const\",\n    \"ioThreadCount\": 1\n}\n</code></pre>"},{"location":"migrating-mcb-2-to-3/#upgrading-your-mc-build-code","title":"Upgrading your MC-Build code","text":"<p>Many features have been updated or removed in MC-Build 3. The following sections detail the changes you will need to make to your MC-Build code to upgrade to MC-Build 3.</p>"},{"location":"migrating-mcb-2-to-3/#compile-loop","title":"Compile <code>!LOOP</code>","text":"<p><code>!LOOP</code> has been replaced with <code>REPEAT</code>, and has new arguments. See Compile REPEAT for more information.</p> <p>The following examples show how to replace <code>!LOOP</code> with <code>REPEAT</code> for a few common use cases.</p> Looping over a static range: <code>!LOOP</code> vs <code>REPEAT</code> <p>If you were using <code>!LOOP</code> to loop over a static number range, you can replace it with <code>REPEAT</code> like this:</p> Original<pre><code>!LOOP(1, 10, i) {\n    say &lt;% i %&gt;\n}\n</code></pre> Updated<pre><code>REPEAT (1, 10) as i {\n    say &lt;% i %&gt;\n}\n</code></pre> Looping over an array: <code>!LOOP</code> vs <code>REPEAT</code> <p>If you were using <code>!LOOP</code> to loop over an array, you can replace it with <code>REPEAT</code> like this:</p> Original<pre><code>!LOOP(array, i) {\n    say &lt;% i %&gt;\n}\n</code></pre> Updated<pre><code>REPEAT (array) as i {\n    say &lt;% i %&gt;\n}\n</code></pre>"},{"location":"migrating-mcb-2-to-3/#compile-if","title":"Compile <code>!IF</code>","text":"<p><code>!IF</code> has been replaced with <code>IF</code>, <code>ELSE IF</code>, and <code>ELSE</code>, and has a few minor syntax changes. See Compile IF / ELSE for more information.</p> <p>The following examples show how to replace <code>!IF</code> with <code>IF</code> for a few common use cases.</p> Simple <code>!IF</code> vs <code>IF</code> <p>If you were using <code>!IF</code> to check a simple condition, you can replace it with <code>IF</code> like this:</p> Original<pre><code>!IF(config.my_variable == 1) {\n    &lt;...&gt;\n}\n</code></pre> Updated<pre><code># Parentheses are no longer required, but are still allowed.\nIF config.my_variable == 1 run {\n    &lt;...&gt;\n}\n</code></pre> Complex <code>!IF</code> vs <code>IF</code> / <code>ELSE IF</code> / <code>ELSE</code> <p>If you were using <code>!IF</code> to check a more complex condition, you can replace it with <code>IF</code>, <code>ELSE IF</code>, and <code>ELSE</code> like this:</p> Original<pre><code>!IF(a == 1 &amp;&amp; b == 2) {\n    &lt;...&gt;\n}\n!IF(!(a == 1) &amp;&amp; b == 2) {\n    &lt;...&gt;\n}\n!IF (!(a == 1) &amp;&amp; !(b == 2)) {\n    &lt;...&gt;\n}\n</code></pre> Updated<pre><code># Parentheses are no longer required, but are still allowed.\nIF a == 1 &amp;&amp; b == 2 {\n    &lt;...&gt;\n} ELSE IF b == 2 {\n    &lt;...&gt;\n} ELSE {\n    &lt;...&gt;\n}\n</code></pre>"},{"location":"migrating-mcb-2-to-3/#execute-if-else","title":"<code>execute if / else</code>","text":"<p><code>execute(condition) {...}</code> has been updated to be an extension of execute blocks, see execute if / else for more information.</p> <p>The following example shows how to update <code>execute if / else</code> to the new syntax.</p> <p>Example</p> Old<pre><code>execute (if score @s my_score matches 1) {\n    &lt;...&gt;\n} else execute (if score @s my_score matches 2) {\n    &lt;...&gt;\n} else {\n    &lt;...&gt;\n}\n</code></pre> Updated<pre><code>execute if score @s my_score matches 1 run {\n    &lt;...&gt;\n} else execute if score @s my_score matches 2 run {\n    &lt;...&gt;\n} else run {\n    &lt;...&gt;\n}\n</code></pre>"},{"location":"migrating-mcb-2-to-3/#while-and-until","title":"<code>while</code> and <code>until</code>","text":"<p><code>while</code> and <code>until</code> and thier async variants have been removed from the language, and will instead be included as part of the standard library. See the standard library's while / until page for more information.</p> <p>Warning</p> <p>The standard library is not yet available, so you will need to implement your own <code>while</code> and <code>until</code> loops via Templates, or wait for the standard library to be released.</p>"},{"location":"migrating-mcb-2-to-3/#tick-and-load-functions","title":"<code>tick</code> and <code>load</code> functions","text":"<p>Tick and Load functions have been updated to be more flexible.</p> <p>Instead of naming your functions <code>tick</code> and <code>load</code>, you can now name them whatever you want, and use the new <code>tick</code> and <code>load</code> keywords after the function name to specify whether the function should be run on the tick or load events.</p> <p>See Function Definitions for more information.</p> Updating <code>tick</code> and <code>load</code> functions Old<pre><code>function tick {\n    &lt;...&gt;\n}\nfunction load {\n    &lt;...&gt;\n}\n</code></pre> Updated<pre><code>function my_ticking_function tick {\n    &lt;...&gt;\n}\nfunction my_loading_function load {\n    &lt;...&gt;\n}\n</code></pre>"},{"location":"migrating-mcb-2-to-3/#macros","title":"Macros","text":"<p>Macros have been replaced with the new Template system.</p> <p>Converting your macros into Templates is a bit more involved, and the ease of doing so will depend on the complexity of your macros. However, the new Template system is much more powerful and flexible than the old macro system, so it is definitely worth the effort to convert them.</p> <p>See the templates documentation for more information.</p> <p>The following example shows how to convert a very simple macro into a Template.</p> Converting a simple macro into a Template Old<pre><code>macro say_this {\n    say &lt;% args[0].content %&gt;\n}\n</code></pre> Updated<pre><code>template say_this {\n    with message:raw {\n        say &lt;% message %&gt;\n    }\n}\n</code></pre>"},{"location":"migrating-mcb-2-to-3/#add-on-languages","title":"Add-on Languages","text":"<p><code>lang-mc-extra</code> and <code>lang-mc-math</code> have had their functionality integrated into MC-Build by default.</p>"},{"location":"language-features/","title":"Language Features","text":""},{"location":"language-features/#index","title":"Index","text":"<ul> <li>Blocks</li> <li>Clocks</li> <li>Compile IF / ELSE</li> <li>Compile REPEAT</li> <li>Directories</li> <li>Execute run</li> <li>Execute if / else</li> <li>Function Calls</li> <li>Function Definitions</li> <li>Imports</li> <li>JavaScript Blocks, and Contexts</li> <li>JSON Files</li> <li>Tags</li> <li>Templates</li> <li>Tick and Load Blocks</li> </ul>"},{"location":"language-features/blocks/","title":"Blocks","text":"<p>Blocks are used to define an inline function, inside another function.</p> <pre><code>block [name] { [&lt;macro arguments&gt; | with &lt;...&gt;]\n    &lt;...&gt;\n}\n</code></pre>"},{"location":"language-features/blocks/#creating-a-block","title":"Creating a Block","text":"<p>When creating a block inside of a function, it will inline a call to it's generated function.</p> <p>Creating an unnamed block will put the generated function into the parent function's folder + <code>zzz/&lt;id&gt;.mcfunction</code>.</p> Creating an Anonymous Block Code<pre><code>function example {\n    say Before block\n    block {\n        say Hello, world!\n    }\n    say After block\n}\n</code></pre> example.mcfunction<pre><code>say Before block\nfunction zzz/0\nsay After block\n</code></pre> zzz/0.mcfunction<pre><code>say Hello, world!\n</code></pre>"},{"location":"language-features/blocks/#naming-a-block","title":"Naming a Block","text":"<p>A named block will put it's generated function into the parent function's folder as <code>&lt;name&gt;.mcfunction</code>.</p> Creating an Named Block Code<pre><code>function example {\n    block my_block {\n        say Hello, world!\n    }\n}\n</code></pre> example.mcfunction<pre><code>function my_block\n</code></pre> my_block.mcfunction<pre><code>say Hello, world!\n</code></pre>"},{"location":"language-features/blocks/#using-macro-arguments","title":"Using Macro Arguments","text":"<p>Blocks can take macro arguments, which are then passed to the inlined function call.</p> Using Macro Arguments <p>Hard-coded Arguments</p> Code<pre><code>function example {\n    block my_block { {input: \"world\"}\n        $say Hello, $(input)!\n    }\n}\n</code></pre> example.mcfunction<pre><code>function my_block {input: \"world\"}\n</code></pre> my_block.mcfunction<pre><code>$say Hello, $(input)!\n</code></pre> <p>Dynamic Arguments</p> Code<pre><code>function example {\n    block my_block { with storage example:arguments {}\n        $say Hello, $(input)!\n    }\n}\n</code></pre> example.mcfunction<pre><code>function my_block with storage example:arguments {}\n</code></pre> my_block.mcfunction<pre><code>$say Hello, $(input)!\n</code></pre>"},{"location":"language-features/clocks/","title":"Clocks","text":"<p>Clocks are another way of defining a function that runs every so often.</p> <pre><code>clock &lt;name&gt; &lt;time&gt; {\n    &lt;...&gt;\n}\n</code></pre> <p>The <code>time</code> argument is identical to the <code>schedule</code> command's delay argument. It takes a number, and a unit of time.</p> Examples <p>Basic 20 Second Clock</p> <p>This will run the <code>say Hello, world!</code> command every 20 seconds.</p> <pre><code>clock my_clock 20s {\n    say Hello, world!\n}\n</code></pre> <p>Basic 1 Tick Clock</p> <p>This will run the <code>say Hello, world!</code> command every tick.</p> <pre><code>clock my_clock 1t {\n    say Hello, world!\n}\n</code></pre>"},{"location":"language-features/compile-if-else/","title":"Compile IF / ELSE","text":"<p><code>IF / ELSE</code> is a compile-time expression that allows you to conditionally include or exclude code from the final output.</p> <pre><code>IF &lt;js-condition&gt; {\n    &lt;...&gt;\n}\n</code></pre> Examples <p>Basic</p> <p>Code<pre><code>IF 1 == 1 {\n    say \"Hello, world!\"\n}\n</code></pre> Output<pre><code>say \"Hello, world!\"\n</code></pre></p> <p>You can also use <code>ELSE IF</code> and <code>ELSE</code> to chain multiple conditions together. <pre><code>IF &lt;js-condition&gt; {\n    &lt;...&gt;\n} ELSE IF &lt;js-condition&gt; {\n    &lt;...&gt;\n} ELSE {\n    &lt;...&gt;\n}\n</code></pre></p> Examples <p>With <code>ELSE IF</code></p> <p>Code<pre><code>IF 1 == 2 {\n    say \"Hello, world!\"\n} ELSE IF 1 == 1 {\n    say \"Goodbye, world!\"\n}\n</code></pre> Output<pre><code>say \"Goodbye, world!\"\n</code></pre></p> <p>With <code>ELSE</code></p> <p>Code<pre><code>IF 1 == 2 {\n    say \"Hello, world!\"\n} ELSE {\n    say \"Goodbye, world!\"\n}\n</code></pre> Output<pre><code>say \"Goodbye, world!\"\n</code></pre></p> <p>With <code>ELSE IF</code> and <code>ELSE</code></p> <p>Code<pre><code>IF 1 == 2 {\n    say \"Hello, world!\"\n} ELSE IF 1 == 3 {\n    say \"Goodbye, world!\"\n} ELSE {\n    say \"See you later, world!\"\n}\n</code></pre> Output<pre><code>say \"See you later, world!\"\n</code></pre></p> <p><code>IF / ELSE</code> can be used in any context. So you can conditionally include functions, directories, and JSON files in the compiled output. <pre><code>IF (config.debug) {\n    dir debug {\n        function do_debug_stuff {\n            say \"Debugging!\"\n        }\n\n        loot_table debug_loot {\n            ...\n        }\n    }\n}\n</code></pre></p>"},{"location":"language-features/compile-repeat/","title":"Compile REPEAT","text":"<p><code>REPEAT</code> is a compile-time loop that can be used to generate code. It is useful for generating repetitive code, like scoreboard trees, and for generating code based on arrays and iterators.</p> <p><code>REPEAT</code> has several different forms, depending on the type of loop you want to create.</p>"},{"location":"language-features/compile-repeat/#integer-range","title":"Integer Range","text":"<p>Repeats the code from <code>min</code> to <code>max</code> inclusive. Incrementing by 1 or -1 based on the provided range.</p> <p>If <code>as</code> is provided, the variable will be assigned to the current value of the loop.</p> <pre><code>REPEAT (min:int, max:int) [as &lt;variable name&gt;] {\n    &lt;...&gt;\n}\n</code></pre> Examples <p>Basic</p> <p>Code<pre><code>REPEAT (1, 3) {\n    say Hello, world!\n}\n</code></pre> Output<pre><code>say Hello, world!\nsay Hello, world!\nsay Hello, world!\n</code></pre></p> <p>With <code>as</code></p> <p>Code<pre><code>REPEAT (1, 3) as i {\n    say Loop &lt;%i%&gt;\n}\n</code></pre> Output<pre><code>say Loop 1\nsay Loop 2\nsay Loop 3\n</code></pre></p>"},{"location":"language-features/compile-repeat/#float-range","title":"Float Range","text":"<p>Repeats the code from <code>min</code> to <code>max</code> inclusive. Incrementing by <code>increment</code>.</p> <p>If <code>as</code> is provided, the variable will be assigned to the current value of the loop.</p> <pre><code>REPEAT (min:float, max:float, increment:float) [as &lt;variable name&gt;] {\n    &lt;...&gt;\n}\n</code></pre> Examples <p>Basic</p> <p>Code<pre><code>REPEAT (0, 1.5, 0.5) {\n    say Hello, world!\n}\n</code></pre> Output<pre><code>say Hello, world!\nsay Hello, world!\nsay Hello, world!\nsay Hello, world!\n</code></pre></p> <p>With <code>as</code></p> <p>Code<pre><code>REPEAT (0, 1.5, 0.5) as i {\n    say Loop &lt;%i%&gt;\n}\n</code></pre> Output<pre><code>say Loop 0\nsay Loop 0.5\nsay Loop 1.0\nsay Loop 1.5\n</code></pre></p>"},{"location":"language-features/compile-repeat/#js-array","title":"JS Array","text":"<p>Repeats the code for each value in the provided <code>array</code>.</p> <p>If <code>as</code> is provided, the variable will be assigned to the current value of the loop.</p> <pre><code>REPEAT (array:Array) [as &lt;variable name&gt;] {\n    &lt;...&gt;\n}\n</code></pre> Examples <p>Basic</p> <p>Code<pre><code>REPEAT ([1,2,7,9]) {\n    say Hello, world!\n}\n</code></pre> Output<pre><code>say Hello, world!\nsay Hello, world!\nsay Hello, world!\nsay Hello, world!\n</code></pre></p> <p>With <code>as</code></p> <p>Code<pre><code>REPEAT ([1,2,7,9]) as i {\n    say Looped &lt;%i%&gt;\n}\n</code></pre> Output<pre><code>say Looped 1\nsay Looped 2\nsay Looped 7\nsay Looped 9\n</code></pre></p>"},{"location":"language-features/compile-repeat/#js-iterator","title":"JS Iterator","text":"<p>Repeats the code for each value in the provided <code>iterator</code>.</p> <p>If <code>as</code> is provided, the variable will be assigned to the current value of the loop.</p> <pre><code>REPEAT (iterator:() =&gt; Iterator) [as &lt;variable name&gt;] {\n    &lt;...&gt;\n}\n</code></pre> Examples <p>Basic</p> <p>Code<pre><code>REPEAT (store.iterator) {\n    say Hello, world!\n}\n</code></pre> Output<pre><code>say Hello, world!\nsay Hello, world!\nsay Hello, world!\nsay Hello, world!\n</code></pre></p> <p>With <code>as</code></p> <p>Code<pre><code>REPEAT (function*() { yield 1; yield 2; yield 7; yield 9; }) as i {\n    say Looped &lt;%i%&gt;\n}\n</code></pre> Output<pre><code>say Looped 1\nsay Looped 2\nsay Looped 7\nsay Looped 9\n</code></pre></p>"},{"location":"language-features/directories/","title":"Directories","text":"<p>Directories allow you to create folders for organizing your Data Pack's generated files.</p> <pre><code>dir &lt;name&gt; {\n    &lt;...&gt;\n}\n</code></pre> Examples <p>Creating a Directory</p> <pre><code>dir my_directory {\n    function my_function {\n        say Hello, world!\n    }\n}\n</code></pre> <p>This will create a folder called <code>my_directory</code> and put the <code>my_function</code> function inside it.</p>"},{"location":"language-features/execute-run/","title":"Execute run","text":"<p>Any <code>execute ... run</code> command can be followed by a Block to create a new function that gets called by execute command.</p> <pre><code>execute ... run {\n    &lt;...&gt;\n}\n</code></pre> Examples <p>Conditional Execution</p> <pre><code>execute if score @s appleCount matches 1 run {\n    say I have 1 apple!\n    playsound minecraft:entity.player.levelup @s ~ ~ ~ 1 1\n}\n</code></pre> <p>This will say \"I have 1 apple!\" and play a sound if the executing entity has a score of 1 in the <code>appleCount</code> objective.</p>"},{"location":"language-features/execute-run/#execute-if-else","title":"Execute If / Else","text":"<p>Any <code>execute run</code> block can be turned into an <code>execute if / else</code> block by appending an <code>else execute ... run</code> or <code>else run</code> block to it</p> <pre><code>execute ... run {\n    &lt;...&gt;\n} else execute ... run {\n    &lt;...&gt;\n} else run {\n    &lt;...&gt;\n}\n</code></pre> Examples <p>Multi-Conditional Execution</p> <pre><code>execute if score @s appleCount matches ..0 run {\n    say I have no apples!\n    playsound minecraft:entity.player.hurt @s ~ ~ ~ 1 1\n} else execute if score @s appleCount matches 1 run {\n    say I have 1 apple!\n    playsound minecraft:entity.player.levelup @s ~ ~ ~ 1 1\n} else run {\n    say I have more than 1 apple!\n    playsound minecraft:ui.toast.challenge_complete @s ~ ~ ~ 1 1\n}\n</code></pre> <p>This will 1: say \"I have no apples!\" and play a sound if the executing entity has a score of 0 in the <code>appleCount</code> objective. 2: say \"I have 1 apple!\" and play a sound if the executing entity has a score of 1 in the <code>appleCount</code> objective. Or 3: say \"I have more than 1 apple!\" and play a sound if the executing entity has a score of more than 1 in the <code>appleCount</code> objective.</p>"},{"location":"language-features/function-calls/","title":"Function Calls","text":"<p>MCB Supports a few non standards call systems for functions, function calls can be made using a relative path, a hiarchical reference and an absolute function reference as well as normally with a literal function reference.</p> <p>The hiarchical function reference starts with <code>^</code> and takes a number of steps up from the current function in which its used.</p> <pre><code>function ^&lt;integer&gt;\n</code></pre> Example Code<pre><code>function dummy {\n    block {\n        function ^1\n        function ^0\n    }\n}\n</code></pre> my_pack:zzz/0.mcfunction<pre><code>function my_pack:dummy\nfunction my_pack:zzz/0\n</code></pre> <p>The root function reference starts with <code>*</code> and will make a reference from current namespace with the given path. <pre><code>function *&lt;path&gt;\n</code></pre></p> Example Code<pre><code>dir folder {\n    function dummy {\n        function *dummy2\n    }\n}\nfunction dummy2 {\n    say Hello, world!\n}\n</code></pre> folder/dummy.mcfunction<pre><code>function my_pack:dummy2\n</code></pre> <p>The relative function reference starts with either <code>./</code> or <code>../</code> and can be used to call a function relative to the call location. Similar to how file paths work in a file system.</p> <pre><code>function ./&lt;path&gt;\nfunction ../&lt;path&gt;\n</code></pre> Example Code<pre><code>dir folder {\n    function dummy {\n        function ./dummy2\n        function ../dummy3\n    }\n    function dummy2 {\n        say Hello, world!\n    }\n}\nfunction dummy3 {\n    say Hello, world!\n}\n</code></pre> folder/dummy.mcfunction<pre><code>function my_pack:folder/dummy2\nfunction my_pack:dummy3\n</code></pre> <p>The final way of calling a function is as normal using using an absolute function call.</p> <pre><code>function &lt;path&gt;\n</code></pre> Example Code<pre><code>dir folder {\n    function dummy {\n        function my_pack:folder/dummy2\n    }\n    function dummy2 {\n        say Hello, world!\n    }\n}\n</code></pre> folder/dummy.mcfunction<pre><code>function my_pack:folder/dummy2\n</code></pre>"},{"location":"language-features/function-definitions/","title":"Function Definitions","text":"<p>Function definitions are used to create new functions. They can be used inside of Directories, or in the root of the <code>.mcb</code> file.</p> <p>Applying the <code>tick</code> or <code>load</code> keyword to a function definition will add it to the <code>minecraft:tick</code> function tag or the <code>minecraft:load</code> function tag, respectively.</p> <pre><code>function &lt;name&gt; [tick|load] {\n    &lt;...&gt;\n}\n</code></pre> Examples <p>Creating a Function</p> <pre><code>function hello {\n    say Hello, world!\n}\n</code></pre> <p>Creating a Ticking Function</p> <pre><code>function hello tick {\n    say I spam chat every tick!\n}\n</code></pre> <p>Creating a Loading Function</p> <pre><code>function hello load {\n    say I'm polite, and only say hello once when the Data Pack loads!\n}\n</code></pre>"},{"location":"language-features/imports/","title":"Imports","text":"<p>MC-Build supports importing of JavaScript, Templates, and libraries.</p>"},{"location":"language-features/imports/#importing-javascript-files","title":"Importing JavaScript Files","text":"<pre><code>import &lt;path_to_file&gt;.js\n</code></pre> <p>When importing a JavaScript file, the context exported via <code>module.exports</code> will be injected into the JavaScript environment in the current file.</p> Examples <p>Importing a JavaScript File</p> my_js_file.js<pre><code>module.exports = {\n    helloWorldString: \"Hello, world!\"\n    myIterator: function* () {\n        yield 1;\n        yield 2;\n        yield 3;\n    }\n}\n</code></pre> example.mcb<pre><code>import ./my_js_file.js\n\nfunction example {\n    say &lt;% helloWorldString %&gt;\n}\n\nREPEAT myIterator as i {\n    function &lt;% i %&gt; {\n        say I'm function &lt;% i %&gt;!\n    }\n}\n</code></pre>"},{"location":"language-features/imports/#importing-template-files","title":"Importing Template Files","text":"<pre><code>import &lt;path_to_file&gt;.mcbt\n</code></pre> <p>When importing a <code>.mcbt</code> file, all the templates from that file will be loaded into the current file and made usable.</p> Examples <p>Importing a Template File</p> my_template.mcbt<pre><code>template hello {\n    with arg1:word {\n        say Hello, &lt;% arg1 %&gt;!\n    }\n}\n</code></pre> example.mcb<pre><code>import ./my_template.mcbt\n\nfunction hello {\n    hello world\n}\n</code></pre>"},{"location":"language-features/imports/#importing-libraries","title":"Importing Libraries","text":"<p>Warning</p> <p>Libraries are Work-in-Progress. This section is subject to change.</p> <pre><code>import &lt;library_name&gt;\n</code></pre> <p>When importing a library by name, the code included in the library will be loaded and any templates from it will be added to the current file.</p> Examples <p>Importing a Library</p> example.mcb<pre><code>import hello_world_lib\n\nfunction hello {\n    hello world\n}\n</code></pre>"},{"location":"language-features/javascript-blocks-and-contexts/","title":"JavaScript Script Blocks","text":"<p>Script Blocks provide and easy, and inline way to use JavaScript to generate, or insert values into, your commands.</p>"},{"location":"language-features/javascript-blocks-and-contexts/#inline-scripts","title":"Inline Scripts","text":"<p>Used to evaluate some JavaScript and inline the result into a command.</p> <p><code>&lt;%...%&gt;</code></p>"},{"location":"language-features/javascript-blocks-and-contexts/#scope","title":"Scope","text":"<p>Variables, and functions that are available for use in inline script blocks.</p> <ul> <li> <p><code>context</code></p> <p>The current Compiler Context.</p> </li> <li> <p><code>embed(block: BoundBlock)</code></p> <p>Takes a <code>BoundBlock</code> instance and embeds a reference to it.</p> </li> <li> <p>Global Scope</p> </li> </ul>"},{"location":"language-features/javascript-blocks-and-contexts/#argument-scope","title":"Argument Scope","text":"<p>Argument scope is the special scope that is used when an Inline Scripts is used as an argument for MC-Build Compile-time features, such as <code>REPEAT</code>, or <code>IF</code> expressions.</p> <p>It has access to everything the normal inline script scope has, except for the <code>embed</code> function.</p> Examples <p>Using an Inline Script</p> Code<pre><code>say &lt;% 1 + 1 %&gt; &lt;%10*10%&gt;\n\nREPEAT (1, 10) as i {\n    say &lt;% i %&gt;\n}\n</code></pre> Output<pre><code>say 2 100\nsay 1\nsay 2\nsay 3\nsay 4\nsay 5\nsay 6\nsay 7\nsay 8\nsay 9\nsay 10\n</code></pre>"},{"location":"language-features/javascript-blocks-and-contexts/#multi-line-scripts","title":"Multi-line Scripts","text":"<p>Used to evaluate more complex JavaScript. Instead of injecting the return result of the script into a command, Multi-line Scripts include a few functions that can be used to generate commands, and more.</p> <pre><code>&lt;%%\n    ...\n%%&gt;\n</code></pre>"},{"location":"language-features/javascript-blocks-and-contexts/#scope_1","title":"Scope","text":"<p>Variables, and functions that are available for use in multi-line script blocks.</p> <ul> <li> <p><code>emit(str: String)</code></p> <p>Emits a string into the output.</p> </li> <li> <p><code>emit.mcb(str: String)</code></p> <p>Emits a string into the output after running it through the MC-Build compiler.</p> </li> <li> <p><code>emit.block(commands: Array[String])</code></p> <p>Takes a list of commands, generates a function, and emits a call to that function.</p> </li> <li> <p><code>context</code></p> <p>The current Compiler Context.</p> </li> <li> <p><code>embed(block: BoundBlock)</code></p> <p>Takes a <code>BoundBlock</code> instance and embeds a reference to it.</p> </li> <li> <p><code>require(path: String)</code></p> <p>Requires a file relative to the current file. Same as the <code>require</code> function in Node.js.</p> </li> <li> <p>Global Scope</p> </li> </ul> Examples <p>Using a Multi-line Script</p> Code<pre><code>function say_hello {\n    &lt;%%\n        emit(\"say Hello World\")\n        for (let i = 0; i &lt; 3; i++) {\n            emit(`say ${i}`)\n        }\n    %%&gt;\n}\n</code></pre> say_hello.mcfunction<pre><code>say Hello World\nsay 0\nsay 1\nsay 2\n</code></pre> <p>Generating Functions with Multi-line Scripts</p> Code<pre><code>&lt;%%\n    for (let i = 0; i &lt; 3; i++) {\n        emit.mcb(`function say_${i} {\n            say ${i}\n        }`)\n    }\n%%&gt;\n</code></pre> say_0.mcfunction<pre><code>say 0\n</code></pre> say_1.mcfunction<pre><code>say 1\n</code></pre> say_2.mcfunction<pre><code>say 2\n</code></pre>"},{"location":"language-features/javascript-blocks-and-contexts/#global-scope","title":"Global Scope","text":"<p>Variables, and functions that are available for use in all script blocks.</p> <ul> <li> <p><code>REPEAT</code></p> <p>the method that produces an iterator used for evaluating <code>REPEAT</code> expressions.</p> </li> <li> <p><code>store</code></p> <p>An object that can be used to store misc values that persist between script blocks, but not between builds.</p> </li> <li> <p><code>global</code></p> <p>An object that can be used to store misc values that persist between script blocks, and persist between builds.</p> </li> <li> <p><code>config</code></p> <p>An object that contains the user-defined values from the <code>config.json</code> file.</p> </li> </ul>"},{"location":"language-features/json-files/","title":"JSON Files","text":"<p>MC-Build includes placeholder syntaxe for raw JSON Files.</p> <p>Looking for Tags?</p> <p>Tags have their own custom syntax in MC-Build.</p> <p>Check out This Page if you're looking for how to define function, block, entity, or other tags.</p> <p>Head's Up!</p> <p>JSON File syntax may change in the near future to provide more generative features.</p>"},{"location":"language-features/json-files/#supported-json-files","title":"Supported JSON Files","text":""},{"location":"language-features/json-files/#advancements","title":"Advancements","text":"<pre><code>advancement &lt;name&gt; &lt;json&gt;\n</code></pre>"},{"location":"language-features/json-files/#item-modifiers","title":"Item Modifiers","text":"<pre><code>item_modifier &lt;name&gt; &lt;json&gt;\n</code></pre>"},{"location":"language-features/json-files/#loot-tables","title":"Loot Tables","text":"<pre><code>loot_table &lt;name&gt; &lt;json&gt;\n</code></pre>"},{"location":"language-features/json-files/#predicates","title":"Predicates","text":"<pre><code>predicate &lt;name&gt; &lt;json&gt;\n</code></pre>"},{"location":"language-features/json-files/#recipes","title":"Recipes","text":"<pre><code>recipe &lt;name&gt; &lt;json&gt;\n</code></pre>"},{"location":"language-features/json-files/#chat-type","title":"Chat Type","text":"<pre><code>chat_type &lt;name&gt; &lt;json&gt;\n</code></pre>"},{"location":"language-features/json-files/#damage-type","title":"Damage Type","text":"<pre><code>damage_type &lt;name&gt; &lt;json&gt;\n</code></pre>"},{"location":"language-features/json-files/#dimension","title":"Dimension","text":"<pre><code>dimension &lt;name&gt; &lt;json&gt;\n</code></pre>"},{"location":"language-features/json-files/#dimension-type","title":"Dimension Type","text":"<pre><code>dimension_type &lt;name&gt; &lt;json&gt;\n</code></pre>"},{"location":"language-features/json-files/#worldgen","title":"Worldgen","text":"<pre><code>worldgen &lt;type&gt; &lt;name&gt; &lt;json&gt;\nworldgen biome &lt;name&gt; &lt;json&gt;\nworldgen configured_carver &lt;name&gt; &lt;json&gt;\nworldgen configured_feature &lt;name&gt; &lt;json&gt;\nworldgen density_function &lt;name&gt; &lt;json&gt;\nworldgen noise &lt;name&gt; &lt;json&gt;\nworldgen noise_settings &lt;name&gt; &lt;json&gt;\nworldgen placed_feature &lt;name&gt; &lt;json&gt;\nworldgen processor_list &lt;name&gt; &lt;json&gt;\nworldgen structure &lt;name&gt; &lt;json&gt;\nworldgen structure_set &lt;name&gt; &lt;json&gt;\nworldgen template_pool &lt;name&gt; &lt;json&gt;\nworldgen world_preset &lt;name&gt; &lt;json&gt;\nworldgen flat_level_generator_preset &lt;name&gt; &lt;json&gt;\n</code></pre> <pre><code>advancement my_advancement {\n    \"criteria\": {\n        ...\n    },\n    \"rewards\": {\n        ...\n    }\n}\n</code></pre>"},{"location":"language-features/libraries/","title":"Libraries","text":"<p>Warning</p> <p>Libraries are Work-in-Progress. This section is subject to change.</p>"},{"location":"language-features/tags/","title":"Tags","text":"<p>Tags are used to group together multiple items, blocks, or functions under a single name. For more information, see the Minecraft Wiki.</p> <p>MC-Build includes a custom syntax for defining tags, without having to leave the comfort of your <code>.mcb</code> file.</p> <pre><code>tag &lt;tag_type&gt; &lt;tag_name&gt; [replace] {\n    &lt;tag_value&gt; [replace]\n}\n</code></pre> Examples <p>Function Tags</p> <pre><code>tag functions my_functions {\n    my_pack:my_function\n    my_pack:my_function2\n    my_pack:my_function3 replace\n}\n\ntag functions my_other_functions replace {\n    #my_pack:my_functions\n    my_pack:my_function4\n}\n</code></pre> <p>Block Tags</p> <pre><code>tag blocks air {\n    minecraft:air\n    minceraft:cave_air\n    minecraft:void_air\n}\n</code></pre>"},{"location":"language-features/templates/","title":"Templates","text":"<p>Templates are essentially compile-time macros. They allow you to define a command, that when called, will be replaced with the code defined in the Template. This is useful for defining complex sequences of commands that are used multiple times in a script, or for modfiying the behavior of vanilla commands.</p> <p>Note</p> <p>Templates can only be defined inside of <code>.mcbt</code> files.</p>"},{"location":"language-features/templates/#creating-a-template","title":"Creating a Template","text":"<p>To create a template, you use the <code>template</code> keyword followed by the name of the template. Inside the template block, you define the code that will be executed when the template is called.</p> <pre><code>template &lt;template_name&gt; {\n    &lt;template_definition&gt;\n}\n</code></pre>"},{"location":"language-features/templates/#defining-call-signatures","title":"Defining Call Signatures","text":"<p>Defining a template call signature is done using the <code>with</code> keyword followed by a list of arguments, then a code block.</p> <pre><code>template my_super_template {\n    with [args] {\n        &lt;mcb_code&gt;\n    }\n}\n</code></pre> <p>Call signatures are checked in the order of definition, so it's best to order them from most specific to least specific.</p> Example <p>Ordering Signatures for Specificity</p> Definition<pre><code>template my_template {\n    with check this first {\n        say Very specific\n    }\n    with a:word b:word c:word {\n        say Less specific\n    }\n    with a:raw {\n        say Least specific\n    }\n}\n</code></pre>"},{"location":"language-features/templates/#arguments","title":"Arguments","text":"<p>Each argument is defined as a name followed by a type. The type is optional, and if not provided, the argument will be treated as a literal.</p> <p>Arguments can be referenced inside of Script blocks by name.</p>"},{"location":"language-features/templates/#argument-types","title":"Argument Types","text":"<ul> <li><code>int</code> - This will match any integer.</li> <li><code>float</code> - This will match any number.</li> <li><code>js</code> - This expects an inline JavaScript block and will pass the computed value.</li> <li><code>word</code> - Matches anything up until the end of the input or the next space.</li> <li><code>raw</code> - Collects all remaining input as a string.</li> <li><code>literal</code> - Special, matches the argument name exactly, and is the default if no type is provided.</li> </ul> Examples <p>Simple Template</p> Definition<pre><code>template my_template {\n    with string:raw {\n        say &lt;%string%&gt;\n    }\n}\n</code></pre> Usage<pre><code>my_template Hello, World!\n</code></pre> Output<pre><code>say Hello, World!\n</code></pre> <p>Warning</p> <p>If you pass a Script Block to anything other than a <code>js</code> argument, it will be interpreted before being passed to the template.</p> Examples <p>Passing a Script Block to a non-js Argument</p> Definition<pre><code>template my_template {\n    with a:number {\n        say &lt;%a%&gt;\n    }\n}\n</code></pre> Usage<pre><code>my_template &lt;%1+1%&gt;\n</code></pre> <p>Because <code>a</code> is not a <code>js</code> argument, the JS block will be evaluated before being passed to the template. So the argument recieves the value <code>2</code> instead of the block <code>&lt;%1+1%&gt;</code>.</p> Output<pre><code>say 2\n</code></pre>"},{"location":"language-features/templates/#calling-a-template","title":"Calling a Template","text":"<p>To call a template, you first need to import it. This is done using the <code>import</code> keyword followed by the path to the <code>.mcbt</code> file containing the template.</p> <pre><code>import &lt;template_path&gt;.mcbt\n</code></pre> <p>Once imported, you can call the template either via <code>template &lt;template_name&gt;</code> or <code>&lt;template_name&gt;</code> followed by the arguments.</p> <pre><code>[template] &lt;template_name&gt; [args]\n</code></pre> <p>Warning</p> <p>If your template name is the same as an MC-Build keyword, you must use the <code>template</code> keyword to call it.</p>"},{"location":"language-features/templates/#tick-and-load","title":"Tick and Load","text":"<p>Templates can define <code>tick</code> and <code>load</code> blocks, which are functions that will be appended to the <code>minecraft:tick</code> and <code>minecraft:load</code> function tags respectively.</p> <pre><code>template &lt;template_name&gt; {\n    load {\n        &lt;mcb_code&gt;\n    }\n    tick {\n        &lt;mcb_code&gt;\n    }\n    with [args] {\n        &lt;mcb_code&gt;\n    }\n}\n</code></pre> <p>Note</p> <p>Templates can only define one <code>load</code> and one <code>tick</code> block each</p> <p>Warning</p> <p>The <code>tick</code> and <code>load</code> blocks are not appended to the <code>minecraft:tick</code> and <code>minecraft:load</code> functions unless the template is called at least once.</p> Examples <p>A simple Clock Template</p> Definition<pre><code>template clock {\n    load {\n        scoreboard objectives add i dummy\n        scoreboard players add #clock.ticks i 0\n    }\n    tick {\n        scoreboard players add #clock.ticks i 1\n    }\n    with get ticks player:word objective:word {\n        scoreboard players operation &lt;%player%&gt; &lt;%objective%&gt; = #clock.ticks i\n    }\n    with get seconds player:word objective:word {\n        scoreboard players operation #clock.seconds i = #clock.ticks i / 20\n        scoreboard players operation &lt;%player%&gt; &lt;%objective%&gt; = #clock.ticks i\n    }\n}\n</code></pre>"},{"location":"language-features/tick-and-load-blocks/","title":"Tick and Load Blocks","text":"<p>Blocks created with the <code>tick</code>, and <code>load</code> keywords will be appended to the <code>minecraft:tick</code>, and <code>minecraft:load</code> function tags respectively.</p> <p>They do not embed a function call when created inside a function.</p> <pre><code>tick {\n    &lt;...&gt;\n}\n</code></pre> <pre><code>load {\n    &lt;...&gt;\n}\n</code></pre> Example <pre><code>function say_hi {\n    load {\n        say this will run on load\n    }\n    tick {\n        this will run every tick\n    }\n    say this will run when say_hi is run\n}\n</code></pre>"}]}